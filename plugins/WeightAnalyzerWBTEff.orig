// -*- C++ -*-
//
// Package:    MonteCarloInfo/WeightAnalyzer
// Class:      WeightAnalyzer
// 
/**\class WeightAnalyzer WeightAnalyzer.cc MonteCarloInfo/WeightAnalyzer/plugins/WeightAnalyzer.cc

 Description: [one line class summary]

 Implementation:
     [Notes on implementation]
*/
//
// Original Author:  clint richardson
//         Created:  Fri, 11 Sep 2015 16:29:00 GMT
//
//


// system include files
#include <memory>
#include <iostream>
// user include files
#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDAnalyzer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/PatCandidates/interface/Jet.h"
#include "TLorentzVector.h"
#include "SimDataFormats/GeneratorProducts/interface/GenEventInfoProduct.h"
#include "FWCore/ServiceRegistry/interface/Service.h"
#include "CommonTools/UtilAlgos/interface/TFileService.h"
#include "JetMETCorrections/Objects/interface/JetCorrector.h"
#include "CondFormats/JetMETObjects/interface/JetCorrectorParameters.h"
#include "CondFormats/JetMETObjects/interface/FactorizedJetCorrector.h"
#include "JetMETCorrections/Modules/interface/JetResolution.h"
#include "TMath.h"
#include "TH1.h"
#include "TH2D.h"
#include <TRandom.h>
#include <TRandom3.h>
#include <iostream>
#include <map>
#include <string>
#include <vector>
#include <utility> // std::pair

//
// class declaration
//

class WeightAnalyzer : public edm::EDAnalyzer {
public:
  explicit WeightAnalyzer(const edm::ParameterSet&);
  ~WeightAnalyzer();
  
  static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);
  
  
private:
  virtual void beginJob() override;
  virtual void analyze(const edm::Event&, const edm::EventSetup&) override;
  virtual void endJob() override;
  TH1F* weightHist;
  TH1D* BEff_Dptbins_b;   
  TH1D* BEff_Dptbins_c;   
  TH1D* BEff_Dptbins_udsg;
  TH1D* BEff_Nptbins_b;  
  TH1D* BEff_Nptbins_c;   
  TH1D* BEff_Nptbins_udsg;
  TH1D* BEffLoose_Nptbins_b;  
  TH1D* BEffLoose_Nptbins_c;   
  TH1D* BEffLoose_Nptbins_udsg;
  TH2D* WEff_Denom;
  TH2D* WEff_Num;
  TH1D* WEff_Dptbins;   
  TH1D* WEff_Nptbins;  
  TH1D* TEff_Dptbins;   
  TH1D* TEff0_Nptbins;  
  TH1D* TEff1_Nptbins;  
  //virtual void beginRun(edm::Run const&, edm::EventSetup const&) override;
  //virtual void endRun(edm::Run const&, edm::EventSetup const&) override;
  //virtual void beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
  //virtual void endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&) override;
  
  // ----------member data ---------------------------
  const edm::InputTag jetsTag;
  const edm::InputTag jetsTagAK4;
  const edm::InputTag genParticles_it;
  const std::string   discriminatorTag;
  const double  discriminatorValue;
  const int     ptNBins;
  const double  ptMin;
  const double  ptMax;
  const int     etaNBins;
  const double  etaMin;
  const double  etaMax;
  std::string MCL3;
  std::string MCL2;
  std::string MCL1;
  std::string SF;
  std::string RES;
  FactorizedJetCorrector *jecak8;
  FactorizedJetCorrector *jecak8_all;
  JetCorrectorParameters *L3JetParAK8;
  JetCorrectorParameters *L2JetParAK8;
  JetCorrectorParameters *L1JetParAK8;
  JME::JetResolution resolutionAK8;
  JME::JetResolutionScaleFactor resolution_SF;
  Variation JERsystematic;
  TRandom3 *gRandom;

  double ptbins[20];

  edm::EDGetTokenT<GenEventInfoProduct> GEIPtoken;  
  edm::EDGetTokenT<std::vector<pat::Jet>> JETtoken;  
  edm::EDGetTokenT<std::vector<pat::Jet>> JETtokenAK4;  
  edm::EDGetTokenT<double> RHOtoken;
  edm::EDGetTokenT<reco::GenParticleCollection> GPtoken;
};

//
// constants, enums and typedefs
//

//
// static data member definitions
//

//
// constructors and destructor
//
WeightAnalyzer::WeightAnalyzer(const edm::ParameterSet& iConfig) :

  jetsTag(iConfig.getParameter<edm::InputTag>("JetsTagAK8")),
  jetsTagAK4(iConfig.getParameter<edm::InputTag>("JetsTag")),
  genParticles_it(iConfig.getParameter<edm::InputTag>("genParticles_it")),
  discriminatorTag(iConfig.getParameter<std::string>("DiscriminatorTag")),
  discriminatorValue(iConfig.getParameter<double>("DiscriminatorValue")),
  ptNBins(iConfig.getParameter<int>("PtNBins")),
  ptMin(iConfig.getParameter<double>("PtMin")),
  ptMax(iConfig.getParameter<double>("PtMax")),
  etaNBins(iConfig.getParameter<int>("EtaNBins")),
  etaMin(iConfig.getParameter<double>("EtaMin")),
  etaMax(iConfig.getParameter<double>("EtaMax"))

{
   //now do what ever initialization is needed
  //  double ptbins[10] = {0,30,50,70,100,140,200,300,670,1000};
  //  double etabins[5] = {0,0.8,1.5,2.4,3.0};

  edm::Service<TFileService> fs;
  weightHist = fs->make<TH1F>("weightHist","MC Weight",10,-2,2);

  WEff_Denom = fs->make<TH2D>("WEff_Denom","",ptNBins,ptMin,ptMax,etaNBins,etaMin,etaMax); WEff_Denom->Sumw2();
  WEff_Num = fs->make<TH2D>("WEff_Num","",ptNBins,ptMin,ptMax,etaNBins,etaMin,etaMax); WEff_Num->Sumw2();
  
  double ptbins[15] = {200,250,300,350,400,450,500,550,600,700,800,1000,1200,1600,2000};
  WEff_Dptbins = fs->make<TH1D>("WEff_Dptbins","",14,ptbins); WEff_Dptbins->Sumw2();
  WEff_Nptbins = fs->make<TH1D>("WEff_Nptbins","",14,ptbins); WEff_Nptbins->Sumw2();
  TEff_Dptbins = fs->make<TH1D>("TEff_Dptbins","",14,ptbins); TEff_Dptbins->Sumw2();
  TEff0_Nptbins = fs->make<TH1D>("TEff0_Nptbins","",14,ptbins); TEff0_Nptbins->Sumw2();
  TEff1_Nptbins = fs->make<TH1D>("TEff1_Nptbins","",14,ptbins); TEff1_Nptbins->Sumw2();

  double ptbinsB[15] = {0,30,50,70,100,140,200,300,400,500,600,800,1000,1200,2000};
  BEff_Dptbins_b    = fs->make<TH1D>("BEff_Dptbins_b   ","",14,ptbinsB); BEff_Dptbins_b->Sumw2();
  BEff_Dptbins_c    = fs->make<TH1D>("BEff_Dptbins_c   ","",14,ptbinsB); BEff_Dptbins_c->Sumw2();
  BEff_Dptbins_udsg = fs->make<TH1D>("BEff_Dptbins_udsg","",14,ptbinsB); BEff_Dptbins_udsg->Sumw2();
  BEff_Nptbins_b      = fs->make<TH1D>("BEff_Nptbins_b     ","",14,ptbinsB); BEff_Nptbins_b->Sumw2();
  BEff_Nptbins_c      = fs->make<TH1D>("BEff_Nptbins_c     ","",14,ptbinsB); BEff_Nptbins_c->Sumw2();
  BEff_Nptbins_udsg   = fs->make<TH1D>("BEff_Nptbins_udsg  ","",14,ptbinsB); BEff_Nptbins_udsg->Sumw2();
  BEffLoose_Nptbins_b      = fs->make<TH1D>("BEffLoose_Nptbins_b     ","",14,ptbinsB); BEffLoose_Nptbins_b->Sumw2();
  BEffLoose_Nptbins_c      = fs->make<TH1D>("BEffLoose_Nptbins_c     ","",14,ptbinsB); BEffLoose_Nptbins_c->Sumw2();
  BEffLoose_Nptbins_udsg   = fs->make<TH1D>("BEffLoose_Nptbins_udsg  ","",14,ptbinsB); BEffLoose_Nptbins_udsg->Sumw2();

  MCL1 = "/uscms_data/d3/jmanagan/LJMetSubmit8011/src/LJMet/Com/data/Spring16_25nsV6_MC_L1FastJet_AK8PFchs.txt";
  MCL2 = "/uscms_data/d3/jmanagan/LJMetSubmit8011/src/LJMet/Com/data/Spring16_25nsV6_MC_L2Relative_AK8PFchs.txt";
  MCL3 = "/uscms_data/d3/jmanagan/LJMetSubmit8011/src/LJMet/Com/data/Spring16_25nsV6_MC_L3Absolute_AK8PFchs.txt";
  SF = "/uscms_data/d3/jmanagan/LJMetSubmit8011/src/LJMet/Com/data/Spring16_25nsV6_MC_SF_AK4PFchs.txt";
  RES = "/uscms_data/d3/jmanagan/LJMetSubmit8011/src/LJMet/Com/data/Spring16_25nsV6_MC_PtResolution_AK8PFchs.txt";

  L1JetParAK8  = new JetCorrectorParameters(MCL1);
  L2JetParAK8  = new JetCorrectorParameters(MCL2);
  L3JetParAK8  = new JetCorrectorParameters(MCL3);

  std::vector<JetCorrectorParameters> vParAK8;
  std::vector<JetCorrectorParameters> vParAK8_all;

  vParAK8.push_back(*L2JetParAK8);
  vParAK8.push_back(*L3JetParAK8);

  vParAK8_all.push_back(*L1JetParAK8);
  vParAK8_all.push_back(*L2JetParAK8);
  vParAK8_all.push_back(*L3JetParAK8);

  jecak8 = new FactorizedJetCorrector(vParAK8);
  jecak8_all = new FactorizedJetCorrector(vParAK8_all);

  resolutionAK8 = JME::JetResolution(RES);
  resolution_SF = JME::JetResolutionScaleFactor(SF);
  JERsystematic = Variation::NOMINAL;    

  gRandom = new TRandom3();

  edm::InputTag GEIPtag("generator");
  GEIPtoken = consumes<GenEventInfoProduct>(GEIPtag);
  JETtoken = consumes<std::vector<pat::Jet>>(jetsTag);
  JETtokenAK4 = consumes<std::vector<pat::Jet>>(jetsTagAK4);
  GPtoken = consumes<reco::GenParticleCollection>(genParticles_it);
  edm::InputTag rhoSrc_("fixedGridRhoFastjetAll", "");
  RHOtoken = consumes<double>(rhoSrc_);
    

}


WeightAnalyzer::~WeightAnalyzer()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

  delete jecak8;
  delete jecak8_all;
  delete L1JetParAK8;
  delete L2JetParAK8;
  delete L3JetParAK8;
  delete gRandom;

}


//
// member functions
//

// ------------ method called for each event  ------------
void
WeightAnalyzer::analyze(const edm::Event& iEvent, const edm::EventSetup& iSetup)
{
  using namespace edm;
  edm::Handle<GenEventInfoProduct> genEvtInfo;
  iEvent.getByToken(GEIPtoken, genEvtInfo);
  
  double weight = 1.0;
  if(genEvtInfo->weight() < 0) weight = -1;
  weightHist->Fill(weight);

  edm::Handle<std::vector<pat::Jet> > jetsAK4;
  iEvent.getByToken(JETtokenAK4,jetsAK4);
  
  // loop over jets
  for(std::vector<pat::Jet>::const_iterator it = jetsAK4->begin(); it != jetsAK4->end(); ++it){
    
    int hadronFlavor = it->hadronFlavour();
    if( abs(hadronFlavor)==5 ){
      BEff_Dptbins_b->Fill(it->pt());

      if( it->bDiscriminator(discriminatorTag.c_str()) >= discriminatorValue ) BEff_Nptbins_b->Fill(it->pt());
      if( it->bDiscriminator(discriminatorTag.c_str()) >= 0.460) BEffLoose_Nptbins_b->Fill(it->pt());
      
    }
    else if( abs(hadronFlavor)==4 ){
      BEff_Dptbins_c->Fill(it->pt());

      if( it->bDiscriminator(discriminatorTag.c_str()) >= discriminatorValue ){
	BEff_Nptbins_c->Fill(it->pt());
      }
      if( it->bDiscriminator(discriminatorTag.c_str()) >= 0.460) BEffLoose_Nptbins_c->Fill(it->pt());
    }
    else{
      BEff_Dptbins_udsg->Fill(it->pt());

      if( it->bDiscriminator(discriminatorTag.c_str()) >= discriminatorValue ){
	BEff_Nptbins_udsg->Fill(it->pt());
      }
      if( it->bDiscriminator(discriminatorTag.c_str()) >= 0.460) BEffLoose_Nptbins_udsg->Fill(it->pt());
    }
  }

  edm::Handle<std::vector<pat::Jet> > jets;
  iEvent.getByToken(JETtoken,jets);
  
  std::vector<double> jetPt;
  std::vector<double> jetEta;
  std::vector<double> jetPhi;
  std::vector<double> jetEnergy;
  std::vector<int>   PrunedTau21Tag;
  std::vector<int>   PrunedTau32tag69;
  std::vector<int>   PrunedTau32tag81;
  
  // loop over jets
  for(std::vector<pat::Jet>::const_iterator ijet = jets->begin(); ijet != jets->end(); ++ijet){
    
    pat::Jet jet = *ijet;
    pat::Jet corrak8 = jet.correctedJet(0);

    bool looseJetID = false;
    if(abs(corrak8.eta()) <= 3.0){
      looseJetID = (corrak8.neutralHadronEnergyFraction() < 0.99 && 
		    corrak8.neutralEmEnergyFraction() < 0.99 && 
		    (corrak8.chargedMultiplicity()+corrak8.neutralMultiplicity()) > 0) && 
	((abs(corrak8.eta()) <= 2.4 && 
	  corrak8.chargedHadronEnergyFraction() > 0 && 
	  corrak8.chargedEmEnergyFraction() < 0.99 && 
	  corrak8.chargedMultiplicity() > 0) || 
	 abs(corrak8.eta()) > 2.4);
    }else{
      looseJetID = corrak8.neutralEmEnergyFraction() < 0.9 && corrak8.neutralMultiplicity() > 10;
    }
    
    if(!looseJetID) continue;

    double ptscale = 1.0;
    double correction = 1.0;
    double pt = corrak8.pt();
    double pt_raw = jet.correctedJet(0).pt();

    edm::Handle<double> rhoHandle;
    iEvent.getByToken(RHOtoken, rhoHandle);
    double rho = std::max(*(rhoHandle.product()), 0.0);
    
    jecak8_all->setJetEta(jet.eta());
    jecak8_all->setJetPt(pt_raw);
    jecak8_all->setJetA(jet.jetArea());
    jecak8_all->setRho(rho); 
    
    try{
      correction = jecak8_all->getCorrection();
    }
    catch(...){
      std::cout << "WARNING! Exception thrown by JetCorrectionUncertainty!" << std::endl;
      std::cout << "WARNING! Possibly, trying to correct a jet/MET outside correction range." << std::endl;
      std::cout << "WARNING! Jet/MET will remain uncorrected." << std::endl;
    }
    
    corrak8.scaleEnergy(correction);
    pt = corrak8.pt();
    
    JME::JetParameters parameters;
    parameters.setJetPt(pt);
    parameters.setJetEta(corrak8.eta());
    parameters.setRho(rho);
    double res = resolutionAK8.getResolution(parameters);
    double factor = resolution_SF.getScaleFactor(parameters,JERsystematic) - 1;

    const reco::GenJet * genJet = jet.genJet();
    bool smeared = false;
    if(genJet){
      double deltaPt = fabs(genJet->pt() - pt);
      double deltaR = reco::deltaR(genJet->p4(),corrak8.p4());	
      if (deltaR < 0.4 && deltaPt <= 3*pt*res){
	double gen_pt = genJet->pt();
	double reco_pt = pt;
	double deltapt = (reco_pt - gen_pt) * factor;
	ptscale = std::max(0.0, (reco_pt + deltapt) / reco_pt);
	smeared = true;
      }
    }
    if (!smeared && factor>0) {
      gRandom->SetSeed(abs(static_cast<int>(jet.phi()*1e4)));
      ptscale = std::max(0.0, gRandom->Gaus(pt,sqrt(factor*(factor+2))*res)/pt);
    }

    corrak8.scaleEnergy(ptscale);

    //    if(fabs(corrak8.eta()) > 2.4) continue;

    jetPt.push_back(corrak8.pt());
    jetEta.push_back(corrak8.eta());
    jetPhi.push_back(corrak8.phi());
    jetEnergy.push_back(corrak8.energy());
    
    pat::Jet l2l3jet = *ijet;
    jecak8->setJetEta(l2l3jet.correctedJet(0).eta());
    jecak8->setJetPt(l2l3jet.correctedJet(0).pt());
    jecak8->setJetE(l2l3jet.correctedJet(0).energy());
    jecak8->setJetA(l2l3jet.jetArea());
    jecak8->setRho(rho);
    double corr = jecak8->getCorrection();

    double thePrunedMass   = corr*(double)l2l3jet.userFloat("ak8PFJetsCHSPrunedMass");
    float smear = gRandom->Gaus(0.0,3.7);
    float prunedMassSmeared = thePrunedMass + smear;

    double theNjettinessTau1 = (double)corrak8.userFloat("NjettinessAK8:tau1");
    double theNjettinessTau2 = (double)corrak8.userFloat("NjettinessAK8:tau2");
    double theNjettinessTau3 = (double)corrak8.userFloat("NjettinessAK8:tau3");

    double theNjettinessTau21 = 99;
    double theNjettinessTau32 = 99;
    if(theNjettinessTau1 != 0) theNjettinessTau21 = theNjettinessTau2/theNjettinessTau1;
    if(theNjettinessTau2 != 0) theNjettinessTau32 = theNjettinessTau3/theNjettinessTau2;

    int PruningTau21Tagged = 0;
    int PruningTau32tag69 = 0;
    int PruningTau32tag81 = 0;
    if(corrak8.pt() > 200 && theNjettinessTau21 < 0.6 && prunedMassSmeared > 65 && prunedMassSmeared < 105){
      PruningTau21Tagged = 1;
    }
    if(corrak8.pt() > 400 && prunedMassSmeared > 110 && prunedMassSmeared < 210){
      if(theNjettinessTau32 < 0.69) PruningTau32tag69 = 1;
    }
    if(corrak8.pt() > 400 && prunedMassSmeared > 105 && prunedMassSmeared < 220){
      if(theNjettinessTau32 < 0.81) PruningTau32tag81 = 1;
    }
    PrunedTau21Tag.push_back(PruningTau21Tagged);
    PrunedTau32tag69.push_back(PruningTau32tag69);
    PrunedTau32tag81.push_back(PruningTau32tag81);

  }
  //  std::cout << "Found " << jetPt.size() << " fat jets in this event" << std::endl;

  // Get the generated particle collection
  edm::Handle<reco::GenParticleCollection> genParticles;
  if(iEvent.getByToken(GPtoken, genParticles)){
    
    // loop over all gen particles in event
    for(size_t i = 0; i < genParticles->size(); i++){
      const reco::GenParticle &p = (*genParticles).at(i);
      int id = p.pdgId();
      
      bool hasRadiation = false;
      bool hasLepton = false;
      
      if(abs(id) == 23 || abs(id) == 24 || abs(id) == 25 || abs(id) == 6){
	
	size_t nDs = p.numberOfDaughters();
	for(size_t j = 0; j < nDs; j++){
	  int dauId = (p.daughter(j))->pdgId();
	  const reco::Candidate *d = p.daughter(j);
	  if(d->pdgId() != dauId) std::cout << "making daughter GenParticle didn't work" << std::endl;
	  
	  if(abs(dauId) == abs(id)) hasRadiation = true;
	  else if(abs(dauId) == 24){  // check t->Wb->leptons and H->WW->leptons
	    while(d->numberOfDaughters() == 1) d = d->daughter(0);
	    if(abs(d->daughter(0)->pdgId()) > 10 && abs(d->daughter(0)->pdgId()) < 17) hasLepton = true;
	    if(abs(d->daughter(1)->pdgId()) > 10 && abs(d->daughter(1)->pdgId()) < 17) hasLepton = true;
	  }
	  else if(abs(dauId) == 23){  // check H->ZZ->leptons
	    while(d->numberOfDaughters() == 1) d = d->daughter(0);
	    if(abs(d->daughter(0)->pdgId()) > 10 && abs(d->daughter(0)->pdgId()) < 17) hasLepton = true;
	    if(abs(d->daughter(1)->pdgId()) > 10 && abs(d->daughter(1)->pdgId()) < 17) hasLepton = true;
	  }
	  else if(abs(dauId) > 10 && abs(dauId) < 17) hasLepton = true;	    
	  
	}
	
	if(hasRadiation) continue;	  
	if(hasLepton) continue;	  
	if(p.pt() < 175) continue;
	
	if(abs(id) == 24){
	  double dRWb = 1000;
	  double dRWW = 1000;
	  
	  const reco::Candidate *mother = p.mother();
	  while(abs(mother->pdgId()) == 24) mother = mother->mother();
	  
	  if(abs(mother->pdgId()) == 6){
	    double dr = reco::deltaR(p.p4(),mother->daughter(1)->p4());
	    if(abs(mother->daughter(1)->pdgId()) == 24) dr = reco::deltaR(p.p4(),mother->daughter(0)->p4());
	    if(dr < dRWb) dRWb = dr;
	  }else if(abs(mother->pdgId()) == 25){
	    double dr = 1000;
	    if(p.pdgId()*mother->daughter(0)->pdgId() > 0){
	      dr = reco::deltaR(p.p4(),mother->daughter(1)->p4());
	    }else{
	      dr = reco::deltaR(p.p4(),mother->daughter(0)->p4());
	    }
	    if(dr < dRWW) dRWW = dr;
	  }		
	  
	  if(dRWW < 0.8) continue; // W from merged H
	  if(dRWb < 0.8) continue; // W from merged t
	}
	
	if(abs(id) == 23){
	  double dRZZ = 1000;
	  
	  const reco::Candidate *mother = p.mother();
	  while(abs(mother->pdgId()) == 23) mother = mother->mother();
	  
	  if(abs(mother->pdgId()) == 25){
	    double dr = 1000;
	    if(p.pdgId()*mother->daughter(0)->pdgId() > 0){
	      dr = reco::deltaR(p.p4(),mother->daughter(1)->p4());
	    }else{
	      dr = reco::deltaR(p.p4(),mother->daughter(0)->p4());
	    }
	    if(dr < dRZZ) dRZZ = dr;
	  }
	  
	  if(dRZZ < 0.8) continue; // Z from merged H
	}
	
	if(p.numberOfDaughters() < 2){
	  std::cout << p.numberOfDaughters() << " daughters from " << p.pdgId() << std::endl;
	  continue;
	}
	if(abs(id) == 23 || abs(id) == 25) continue; // no effs, but keep method for later

	if(abs(id) == 24){
	  TLorentzVector d1,d2,tempW,trueW,jetW;
	  d1.SetPtEtaPhiE(p.daughter(0)->pt(),p.daughter(0)->eta(),p.daughter(0)->phi(),p.daughter(0)->energy());
	  d2.SetPtEtaPhiE(p.daughter(1)->pt(),p.daughter(1)->eta(),p.daughter(1)->phi(),p.daughter(1)->energy());
	  trueW.SetPtEtaPhiE(p.pt(),p.eta(),p.phi(),p.energy());
	  tempW.SetPtEtaPhiE(0,0,0,0);
	  jetW.SetPtEtaPhiE(0,0,0,0);
	  
	  double minDR = 1000;
	  int matchtag = -1;
	  for(unsigned int itag = 0; itag < jetPt.size(); itag++){
	    tempW.SetPtEtaPhiE(jetPt.at(itag),jetEta.at(itag),jetPhi.at(itag),jetEnergy.at(itag));
	    double tempDR = trueW.DeltaR(tempW);
	    if(tempDR < minDR){
	      minDR = tempDR;
	      matchtag = itag;
	      jetW = tempW;
	    }
	  }
	  if(minDR > 0.8) continue;
	  
	  bool WallDsInJet = false;
	  if(jetW.DeltaR(d1) < 0.8 && jetW.DeltaR(d2) < 0.8) WallDsInJet = true;
	  if(!WallDsInJet) continue;
	  
	  // Fill denominator with true Ws matched to AK8 jets
	  WEff_Denom->Fill(p.pt(),p.eta(),weight);
	  WEff_Dptbins->Fill(p.pt(),weight);
	  
	  // Fill denominator with true Ws matched to tagged jets
	  if(PrunedTau21Tag.at(matchtag) == 0) continue;
	  WEff_Num->Fill(p.pt(),p.eta(),weight);
	  WEff_Nptbins->Fill(p.pt(),weight);
	}

	if(abs(id) == 6){
	  TLorentzVector d1,d2,d3,tempT,trueT,jetT;
	  const reco::Candidate *W = p.daughter(0);
	  const reco::Candidate *b = p.daughter(1);
	  if(abs(W->pdgId()) == 5){
	    W = p.daughter(1);
	    b = p.daughter(0);
	  }

	  while(W->numberOfDaughters() == 1) W = W->daughter(0);	  
	  d1.SetPtEtaPhiE(W->daughter(0)->pt(),W->daughter(0)->eta(),W->daughter(0)->phi(),W->daughter(0)->energy());
	  d2.SetPtEtaPhiE(W->daughter(1)->pt(),W->daughter(1)->eta(),W->daughter(1)->phi(),W->daughter(1)->energy());
	  d3.SetPtEtaPhiE(b->pt(),b->eta(),b->phi(),b->energy());	  
	  trueT.SetPtEtaPhiE(p.pt(),p.eta(),p.phi(),p.energy());
	  tempT.SetPtEtaPhiE(0,0,0,0);
	  jetT.SetPtEtaPhiE(0,0,0,0);

	  double minDR = 1000;
	  int matchtag = -1;
	  for(unsigned int itag = 0; itag < jetPt.size(); itag++){
	    tempT.SetPtEtaPhiE(jetPt.at(itag),jetEta.at(itag),jetPhi.at(itag),jetEnergy.at(itag));
	    double tempDR = trueT.DeltaR(tempT);
	    if(tempDR < minDR){
	      minDR = tempDR;
	      matchtag = itag;
	      jetT = tempT;
	    }
	  }
	  if(minDR > 0.8) continue;
	  
	  bool TallDsInJet = false;
	  if(jetT.DeltaR(d1) < 0.8 && jetT.DeltaR(d2) < 0.8 && jetT.DeltaR(d3) < 0.8) TallDsInJet = true;
	  if(!TallDsInJet) continue;
	  
	  // Fill denominator with true tops matched to AK8 jets
	  TEff_Dptbins->Fill(p.pt(),weight);
	  
	  // Fill denominator with true tops matched to tagged jets
	  if(PrunedTau32tag69.at(matchtag) == 1) TEff0_Nptbins->Fill(p.pt(),weight);
	  if(PrunedTau32tag81.at(matchtag) == 1) TEff1_Nptbins->Fill(p.pt(),weight);
	}
      }
    }
  }
}


// ------------ method called once each job just before starting event loop  ------------
void 
WeightAnalyzer::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
WeightAnalyzer::endJob() 
{
}

// ------------ method called when starting to processes a run  ------------
/*
void 
WeightAnalyzer::beginRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a run  ------------
/*
void 
WeightAnalyzer::endRun(edm::Run const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when starting to processes a luminosity block  ------------
/*
void 
WeightAnalyzer::beginLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method called when ending the processing of a luminosity block  ------------
/*
void 
WeightAnalyzer::endLuminosityBlock(edm::LuminosityBlock const&, edm::EventSetup const&)
{
}
*/

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
WeightAnalyzer::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}

//define this as a plug-in
DEFINE_FWK_MODULE(WeightAnalyzer);
